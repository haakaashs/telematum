// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	models "screening/models"

	mock "github.com/stretchr/testify/mock"
)

type UserDB interface {
	CreateOrUpdateUser(models.User) (uint, error)
}

// UserDB is an autogenerated mock type for the UserDB type
type userDB struct {
	mock.Mock
}

func NewUserDB() *userDB {
	return &userDB{}
}

// CreateOrUpdateUser provides a mock function with given fields: _a0
func (_m *userDB) CreateOrUpdateUser(_a0 models.User) (uint, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateUser")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(models.User) (uint, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(models.User) uint); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(models.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserDB creates a new instance of UserDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
// func NewUserDB(t interface {
// 	mock.TestingT
// 	Cleanup(func())
// }) *UserDB {
// 	mock := &UserDB{}
// 	mock.Mock.Test(t)

// 	t.Cleanup(func() { mock.AssertExpectations(t) })

// 	return mock
// }
